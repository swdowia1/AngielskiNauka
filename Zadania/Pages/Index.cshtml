@page
@model Zadania.Pages.IndexModel

<link rel="stylesheet" href="~/css/zadania.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">


<div class="task-app-form">
    <h2>📝 Dodaj nowe zadanie</h2>
    <div class="form">
        <label>Tytuł zadania</label>
        <input type="text" name="NewTaskText" required placeholder="np. Naucz się ASP.NET" />


        <button onclick="addTask()" type="submit">🚀 Zapisz zadanie</button>



    </div>
</div>

<div class="task-list">
    <h3>📋 Twoje zadania</h3>

    @foreach (var zadanie in Model.jobs)
    {
        <div class="task-card">
            <div class="task-info">
                <h4>@zadanie.Name</h4>


                <span id="@($"tab{zadanie.Id}")" class="deadline">@zadanie.TimeJob (HH:mm)</span>

            </div>

            @if (zadanie.Work == 0)
            {
                <span>

                    <i onclick="toggleStrokeColor(@zadanie.Id)" class="bi bi-play-circle fs-1"></i>
                    <i class="bi bi-archive fs-1" onclick="deleteTask(@zadanie.Id)"></i>

                </span>

            }
            else
            {


                <div onclick="toggleStrokeColor(@zadanie.Id)" style="width:50px; height:50px; cursor:pointer;">
                    <svg viewBox="0 0 100 100" width="50" height="50">
                        <defs>
                            <clipPath id="hourglass">
                                <polygon points="30,10 70,10 50,50 70,90 30,90 50,50" />
                            </clipPath>
                        </defs>

                        <!-- Ramka klepsydry z zaokrąglonymi krawędziami -->
                        <rect x="30" y="10" width="40" height="80" rx="10" ry="10" fill="none" stroke="#FF8C94" stroke-width="4" />

                        <!-- Piasek górny (delikatny róż, ale mniej cukierkowy) -->
                        <rect x="32" y="12" width="36" height="35" fill="#FFB3B3" clip-path="url(#hourglass)">
                            <animate attributeName="height" values="35;5;35" dur="3s" repeatCount="indefinite" />
                            <animate attributeName="y" values="12;42;12" dur="3s" repeatCount="indefinite" />
                        </rect>

                        <!-- Piasek dolny (nieco jaśniejszy róż) -->
                        <rect x="32" y="55" width="36" height="35" fill="#FFD1D1" clip-path="url(#hourglass)">
                            <animate attributeName="height" values="5;35;5" dur="3s" repeatCount="indefinite" />
                        </rect>
                    </svg>
                </div>


            }
        </div>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteLabel">Potwierdzenie</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Zamknij">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Czy na pewno chcesz usunąć to zadanie?
            </div>
            <div class="modal-footer">
            
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">Usuń</button>
            </div>
        </div>
    </div>
</div>


<script>
    var jobid = '@Model.JobId';
         let taskIdToDelete = null;
    console.log(jobid);
    if (jobid > 0) {
        console.log("Job ID jest większe od 0");
        startTimer(@Model.TotalMinute, jobid); // Rozpo
    }
    function startTimer(seconds, tabId) {
        let counter = seconds * 60;

        function updateTimer() {
            let hours = String(Math.floor(counter / 3600)).padStart(2, '0');
            let minutes = String(Math.floor((counter % 3600) / 60)).padStart(2, '0');
            let sec = String(counter % 60).padStart(2, '0');

            console.log(hours, minutes, sec)

            document.getElementById("tab" + tabId).textContent = `${hours}:${minutes}:${sec}`;
            counter++;
        }

        updateTimer();
        setInterval(updateTimer, 1000);
    }

    function toggleStrokeColor(event) {


        postjson("api/zad/update", event, function (data) {

            window.location.reload();



        }, function (data) {

            console.log(data)

        })
    }
    @* function deleteTask(taskid)
    {
       postjson("api/zad/deleteTask", taskid, function (data) {

            window.location.reload();



        }, function (data) {

            console.log(data)

        })
    } *@
   

    function deleteTask(taskId) {
        taskIdToDelete = taskId;
        $('#confirmDeleteModal').modal('show'); // Pokaż modal
    }

    function confirmDelete() {
        postjson("api/zad/deleteTask", taskIdToDelete, function (data) {
            window.location.reload();
        }, function (data) {
            console.log(data);
        });
    }

    function addTask() {
        var taskText = $('input[name="NewTaskText"]').val();


        postjson("api/zad/addtask", taskText, function (data) {

            window.location.reload();



        }, function (data) {

            console.log(data)

        })

    }



</script>
