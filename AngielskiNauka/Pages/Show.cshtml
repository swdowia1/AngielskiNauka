@page "{id:int?}"
@model AngielskiNauka.Pages.ShowModel
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
@inject LocService ls
@{
    int lp = 1;
    double procent=((Model.slowa.Where(j => j.Stan >0).Count()*1.0/Model.slowa.Count()))*100;
    string tytul_data = "Grupowanie po dacie";
    string tytul_stan = "Grupowanie po stan";
}
<style>
    .zielony {
        background-color: #d4edda; /* Jasna zieleń */
    }

    .bialy {
        background-color: white;
    }
    #scrollTopBtn {
        position: fixed;
        bottom: 100px;
        right: 20px;
        z-index: 100;
        background-color: #007bff;
        color: white;
        border: none;
        padding: 12px 16px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 20px;
        display: none; /* ukryty domyślnie */
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
    #scrollTopBtn:hover {
        background-color: #0056b3;
    }
</style>
<h1>Statystyka dla poziomu: @Model.PoziomName</h1>
<partial name="_PodSum" model="Tuple.Create(@tytul_data,@Model.listByData,0)" />
<partial name="_PodSum" model="Tuple.Create(@tytul_stan,@Model.listByStatus,1)" />
<canvas id="myChart"></canvas>
<hr />
<table class="table table-hover">
    <thead>
        <tr>
            <th>@ls.Get("lp")</th>
           
            <th>@ls.Get("ang")</th>
            <th>@ls.Get("pol")</th>
            <th>Stan</th>
            <th>Data</th>


        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.slowa)
        {

            var rowClass = lp <= Model.Ile ? "zielony" : "bialy";
           @*  var polandTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");

            // Konwersja daty
            var dataAktPoland = TimeZoneInfo.ConvertTimeFromUtc(item.DataAkt.ToUniversalTime(), polandTimeZone); *@
            

            <tr class="@rowClass">
                <td>@(lp++)</td>
                
                <td>
                    <a href="/daneedit/@item.DaneId">@item.Ang</a>
                </td>
                <td>@item.Pol</td>
                
                <td>@item.Stan</td>
               @if(item.DataAkt.Year>2000)
               {
                    var sformatowanaData = item.DataAkt.ToString("dddd d MMMM", new System.Globalization.CultureInfo("pl-PL"));
                    <td class="nowrap">@sformatowanaData</td>
               }

            </tr>

        }

    </tbody>
</table>
<button onclick="scrollToTop()" id="scrollTopBtn" title="Do góry">⬆</button>
<script>
     window.onscroll = function () {
        const btn = document.getElementById("scrollTopBtn");
        if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
            btn.style.display = "block";
        } else {
            btn.style.display = "none";
        }
    };

    function scrollToTop() {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }
   

   
    function tabela(divName, title, x, y) {

        // Render the chart
        var ctx = document.getElementById(divName).getContext('2d');
        ctx.width = 200;
        ctx.height = 200;
        var salesChart = new Chart(ctx, {
            type: 'bar', // Change to 'line', 'pie', etc., if needed
            data: {
                labels: x,
                datasets: [{
                    label: title,
                    data: y, // Values for each slice
                    backgroundColor: [
                        '#FF6384', // Red
                        '#36A2EB', // Blue
                        '#FFCE56', // Yellow
                        '#4BC0C0'  // Teal
                    ],
                    hoverBackgroundColor: [
                        '#FF6384AA', // Semi-transparent red
                        '#36A2EBAA', // Semi-transparent blue
                        '#FFCE56AA', // Semi-transparent yellow
                        '#4BC0C0AA'  // Semi-transparent teal
                    ]
                }]
            },
            options: {
                responsive: true,
                tooltipTemplate: "<%= value %>",
                maintainAspectRatio: true, // Allow custom aspect ratio
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        enabled: true,
                    }
                }
            },
            plugins: [{
                id: 'customText',
                afterDatasetsDraw(chart, args, options) {
                    const { ctx, data, chartArea: { top, left, right, bottom, width, height } } = chart;

                    chart.data.datasets.forEach((dataset, datasetIndex) => {
                        const meta = chart.getDatasetMeta(datasetIndex);

                        meta.data.forEach((bar, index) => {
                            const value = dataset.data[index];
                            const x = bar.x;
                            const y = bar.y;

                            ctx.save();
                            ctx.font = '12px Arial';
                            ctx.fillStyle = 'black';
                            ctx.textAlign = 'center';
                            ctx.fillText(value, x, y - 5); // Draw text above the bar
                            ctx.restore();
                        });
                    });
                }
            }]
        });

    }
</script>