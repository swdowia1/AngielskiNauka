@page "{id:int?}"



@model IndexModel
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>



@{



    ViewData["Title"] = "Home page";



    string ladowanie = "..ladowanie";



}



<style>



    .btn2 {
        width: 200px;
    }

    .swsw {
        font-family: SpaceGrotesk-Light;
        color: red;
       
        font-size: 140px;
        margin-bottom: 40px;
    }

    .timer-container {
        text-align: left;
        background: linear-gradient(to right, #ff7e5f, #feb47b);
      
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .time-fields {
        display: flex;
        align-items: center;
       
        margin-top: 20px;
    }

    .field {
        text-align: center;
        margin: 0 10px;
    }

        .field span {
            font-size: 48px;
            font-weight: bold;
            color: #333;
            display: block;
        }

        .field label {
            font-size: 14px;
            color: #777;
        }

    .separator {
        font-size: 48px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
    }

   
</style>




<h1> Poziom :@Model.poziomnazwa</h1>
<span style="color:brown;font-size:x-large" id="info"></span>
<h1><span id="ang">@ladowanie</span></h1>




<div class="container">
    <div class="row">
        <div class="col-3">
            <div class="vstack gap-3">



                <div>



                    <button onclick="answer(0)" class="btn2 btn btn-warning btn-block custom-btn-size">



                        <span id="pol0">@ladowanie</span>



                    </button>



                </div>



                <div>



                    <button onclick="answer(1)" class="btn2 btn btn-warning btn-block custom-btn-size">



                        <span id="pol1">@ladowanie</span>



                    </button>



                </div>



                <div>



                    <button onclick="answer(2)" class="btn2 btn btn-warning btn-block custom-btn-size">



                        <span id="pol2">@ladowanie</span>



                    </button>



                </div>



                <div>



                    <button onclick="answer(3)" class="btn2 btn btn-warning btn-block custom-btn-size">



                        <span id="pol3">@ladowanie</span>



                    </button>



                </div>








            </div>
        </div>
       
      
    </div>

    <div class="timer-container">
        <div class="time-fields">
            <div class="field">
                <span id="minutes">00</span>
                <label>Minuty</label>
            </div>
            <div class="separator">:</div>
            <div class="field">
                <span id="seconds">00</span>
                <label>Sekundy</label>
            </div>
            <div class="field">
                <span id="zostalo">00</span>
                <label>Zostało</label>
            </div>
            <div class="field">
                <span id="stan">00</span>
                <label>stan</label>
            </div>
            <div class="field">
                <span id="zle">00</span>
                <label>Żle</label>
            </div>
        </div>
    </div><canvas id="myChart" width="400" height="200"></canvas>
</div>







<br />
<div id="stan"></div>
<br />
<table id="myTable" class="table table-striped">
    <thead>
        <tr>
            <th>Ang</th>
            <th>pol</th>
        </tr>
    </thead>
    <tbody id="tableBody">
        
    </tbody>
    
</table>
<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true" id="modalDeleteProductDelivery">
    <div class="modal-dialog modal-sm">
        <div class="modal-content" style="width: fit-content">
            <div class="modal-header">


                <h4 class="modal-title" style="display:flex; gap: 15px; align-items: center"><i class="fas fa-question-circle"></i><span id="wynik" class="n"> Wynik testu</span>  </h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-bs-dismiss="modal" id="btnProductNo">OK</button>
              
            </div>
        </div>
    </div>
</div>
<hr />

<script>
    // const connection = new signalR.HubConnectionBuilder()
    //     .withUrl("/taskHub")
    //     .build();

    // // Nasłuchiwanie powiadomień o nowych zadaniach
    // connection.on("NewTaskNotification", (title, description) => {
    //     alert(`Nowe zadanie: ${title} - ${description}`);
    //     // Możesz tu dodać np. odświeżenie listy zadań
    // });

    // connection.start().then(() => {
    //     console.log("Połączono z hubem.");
    // });
    // Pobierz element canvas
    const ctx = document.getElementById('myChart').getContext('2d');

    // Utwórz początkowy wykres
    const myChart = new Chart(ctx, {
        type: 'line', // Typ wykresu
        data: {
            labels: [''], // Początkowe etykiety
            datasets: [{
                label: 'Stan',
                data: [], // Początkowe dane
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderWidth: 2,
                fill: true,
                tension: 0.4, // Dodaje gładkie krzywe
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Funkcja dodawania punktów
    function addPoint(x,y) {
        
            // Dodaj etykietę i wartość do wykresu
            myChart.data.labels.push(x);
            myChart.data.datasets[0].data.push(y);

            // Odśwież wykres
            myChart.update();

        
    }

    let intervalId; // Przechowuje ID interwału
    

    var aktualny = 0;

    var poziom = '@Model.poziom';

    var zle = 0;

    var dobrze = 0;
    var odpowiedz = 0;

    var iloscall = 20;

    var slownik = null;
    var datazle=null;

    function postep() {
      
        var zmiana=100/iloscall
        
        var zrobioneilosc = iloscall - aktualny;

        $('#progBar').val(zrobioneilosc * zmiana);

        $('#zrobione').text(' ' + zrobioneilosc);
        
        $('#zostalo').text(zrobioneilosc);

       

        $('#progBardobrze').val(dobrze * zmiana);

        $('#dobrze').text(' ' + dobrze);
        var procent = (dobrze / odpowiedz) * 100;
        if (odpowiedz > 0) {
            
           
            ;
            $('#stan').text(parseInt(procent, 10));
            $('#zle').text(parseInt(zle, 10));
        }
        addPoint(aktualny, procent)
    }
    function deleteAllPoints() {
        myChart.data.labels = []; // Clear all labels
        myChart.data.datasets[0].data = []; // Clear all data
        myChart.update(); // Update the chart to reflect changes
    }

    function wyslijodpowiedzi() {
        var calosc = (dobrze / odpowiedz) * 100;
        clearInterval(intervalId); // Zatrzymuje interwał
      
        infoapp('twoj wynik to ' + calosc)
        var index=0
        for (index = 0; index < slownik.slowa.length; ++index) {
            var entry = slownik.slowa[index];
            if (entry.stan==2) {
                console.log(entry)
                $('#tableBody').append('<tr><td>' + entry.ang + '</td><td>' + entry.pol + '</td></tr>');
            }
        }
      
        //$('#modalDeleteProductDelivery').modal('show');
        $('#stan').text('koniec twoj wynik to ' + parseInt(calosc, 10));
        $('#wynik').text( 'Wynik testu ' + calosc+'%');
        postjson("api/ang", slownik, function (data) {

            deleteAllPoints();
            infoapp('nowa lecja')
            
            console.log(data);
            LadujDane(poziom)


        }, function (data) {

            console.log(data)

        })



    }



    function answer(id) {
        $("#tableBody").empty();
        if (aktualny >= iloscall) {
            console.log('nie ma odpowiedzi', aktualny)
            infoapp('koniec wiecej nie ma')
            return
        }
        odpowiedz = odpowiedz + 1;
        var slowo = slownik.slowa[aktualny];
       



        if (slowo.pol == slowo.odpowiedzi[id]) {



       

            dobrze = dobrze + 1

            slowo.stan = 1;



        }



        else {



          

            zle = zle + 1

            slowo.stan = 2;



        }


        aktualny = aktualny + 1
        console.log('aktualny odp', aktualny)
        if (aktualny >= iloscall) {
            infoapp('koniec testu')
            wyslijodpowiedzi()


        }
        else {
            postep()

            showData(aktualny);
        }

    }
  

    function showData(pos) {
        
        var d = slownik.slowa[pos];
        $('#ang').text(d.ang);
        $('#pol0').text(d.odpowiedzi[0]);
        $('#pol1').text(d.odpowiedzi[1]);
        $('#pol2').text(d.odpowiedzi[2]);
        $('#pol3').text(d.odpowiedzi[3]);
        
       
    }
    function startTimer() {
        const minutesElement = document.getElementById('minutes');
        const secondsElement = document.getElementById('seconds');

        let totalSeconds = 0;

        function updateTimer() {
            const minutes = Math.floor(totalSeconds / 60).toString().padStart(2, '0');
            const seconds = (totalSeconds % 60).toString().padStart(2, '0');

            minutesElement.textContent = minutes;
            secondsElement.textContent = seconds;

            totalSeconds++;
        }

        intervalId = setInterval(updateTimer, 1000);
    }
    LadujDane(poziom)
    function infoapp(tekst) {
        
        $('#info').text(tekst)
    }
    function LadujDane(poziom) {
        aktualny = 0;
        console.log('aktualny', aktualny)
        var poziom = '@Model.poziom';

      
        zle = 0;

       
        dobrze = 0;
       
        odpowiedz = 0;
        


        getjson("api/ang/" + poziom, function (data) {

            iloscall = data.slowa.length;
            postep();


            

            startTimer();

            slownik = data;
            
            showData(0)

        }, function (data) {









            console.log(data.message);





        })
    }


</script>